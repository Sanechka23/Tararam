import telebot
from telebot import types
import pandas as pd
from config import token
from parser1 import pars_1
from parser2 import pars_2

bot = telebot.TeleBot(token)

data = pd.DataFrame(columns=['user_id', 'event_type'])
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ —Ç–µ–±–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —Å–≤–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫ ü•≥ –∏–ª–∏ —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è üòÑ  ")
    markup = types.InlineKeyboardMarkup()
    itembtn1 = types.InlineKeyboardButton('–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', callback_data='option1')
    itembtn2 = types.InlineKeyboardButton('–°–≤–∞–¥—å–±–∞', callback_data='option2')
    itembtn3 = types.InlineKeyboardButton('–ú–∞–ª—å—á–∏—à–Ω–∏–∫', callback_data='option4')
    itembtn4 = types.InlineKeyboardButton('–í—Å—Ç—Ä–µ—á–∞ c –¥—Ä—É–∑—å—è–º–∏', callback_data='option3')
    markup.add(itembtn1, itembtn2, itembtn3,itembtn4)
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –∫–æ –º–Ω–µ ü§î ", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['option1', 'option2', 'option3', 'option4'])
def handle_event_type(call):
    if call.data == 'option1':
        data.loc[len(data.index)] = {'user_id': call.from_user.id, 'event_type': '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', 'link': None}
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è üéÇ")
    elif call.data == 'option2':
        data.loc[len(data.index)] = {'user_id': call.from_user.id, 'event_type': '–°–≤–∞–¥—å–±–∞', 'link': None}
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–≤–∞–¥—å–±—É üë∞")
    elif call.data == 'option3':
        data.loc[len(data.index)] = {'user_id': call.from_user.id, 'event_type': '–í—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä—É–∑—å—è–º–∏', 'link': None}
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å—Ç—Ä–µ—á—É —Å –¥—Ä—É–∑—å—è–º–∏ üòé")
    elif call.data == 'option4':
        data.loc[len(data.index)] = {'user_id': call.from_user.id, 'event_type': '–º–∞–ª—å—á–∏—à–Ω–∏–∫', 'link': None}
        bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–ª—å—á–∏—à–Ω–∏–∫ üï∫")
    show_place_options(call.message)

def show_place_options(message):
    markup = types.InlineKeyboardMarkup()
    itembtn1 = types.InlineKeyboardButton('–ë–æ—É–ª–∏–Ω–≥', callback_data='bowling')
    itembtn2 = types.InlineKeyboardButton('–õ–æ—Ñ—Ç—ã', callback_data='loft')
    markup.add(itembtn1, itembtn2)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–ª–æ—â–∞–¥–∫–∏", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'bowling')
def handle_bowling(call):
    global current_club_index  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    current_club_index = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    show_club_info(call)


def show_club_info(call):
    global current_club_index
    all_club_data = pars_1()
    if current_club_index < len(all_club_data):
        club = all_club_data[current_club_index]
        response = f"*{club['name']}*\n"
        response += f"–ú–µ—Ç—Ä–æ: {', '.join(club['metro'])}\n"
        response += f"–¶–µ–Ω—ã:\n"
        for price_item in club['price']:
            response += f"- {price_item}\n"
        response += f"\n\n\n{club['url']}"
        bot.send_message(call.message.chat.id, response)
        current_club_index += 1
        show_place_options2(call.message)
    else:
        bot.send_message(call.message.chat.id, "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç")


def show_place_options2(message):
    markup = types.InlineKeyboardMarkup()
    itembtn1 = types.InlineKeyboardButton('–î–∞', callback_data='Yes')
    itembtn2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='No')
    markup.add(itembtn1, itembtn2)
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –µ—â–µ", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'Yes')
def handle_yes(call):
    show_club_info(call)


@bot.callback_query_handler(func=lambda call: call.data == 'No')
def handle_no(call):
    show_place_options(call.message) 



@bot.callback_query_handler(func=lambda call: call.data == 'loft')
def handle_loft(call):
    global current_loft_index  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    current_loft_index = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    show_loft_info(call)


def show_loft_info(call):
    global current_loft_index
    all_loft_data = pars_2()
    if current_loft_index < len(all_loft_data):
        loft = all_loft_data[current_loft_index]
        response = f"*{loft['name']}*\n"
        response += f"–ú–µ—Ç—Ä–æ: {', '.join(loft['metro'])}\n"
        response += f"–¶–µ–Ω—ã:\n"
        for price_item in loft['price']:
            response += f"- {price_item}\n"
        response += f"\n\n\n{loft['url']}"
        bot.send_message(call.message.chat.id, response)
        current_loft_index += 1
        show_place_options3(call.message)
    else:
        bot.send_message(call.message.chat.id, "–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç")


def show_place_options3(message):
    markup = types.InlineKeyboardMarkup()
    itembtn1 = types.InlineKeyboardButton('–î–∞', callback_data='Yes2')
    itembtn2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='No2')
    markup.add(itembtn1, itembtn2)
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –µ—â–µ", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'Yes2')
def handle_yes(call):
    show_loft_info(call)


@bot.callback_query_handler(func=lambda call: call.data == 'No2')
def handle_no(call):
    show_place_options(call.message) 


    


bot.infinity_polling()
data.to_csv('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.csv')
df_from_csv = pd.read_csv('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.csv')
df_from_csv
